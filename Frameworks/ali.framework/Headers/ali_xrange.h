// Generator of sequences just like Python's xrange

#pragma once

namespace ali
{

// ******************************************************************
template <typename T>
class xrange_type
// ******************************************************************
{
public:
    // ******************************************************************
    class iterator
    // ******************************************************************
    {
    public:
        // ******************************************************************
        constexpr iterator( T current )
        // ******************************************************************
            : _current{current}
        {}

        // ******************************************************************
        friend constexpr bool operator ==( iterator const& a,
                                           iterator const& b )
        // ******************************************************************
        {
            return a._current == b._current;
        }

        // ******************************************************************
        friend constexpr bool operator !=( iterator const& a,
                                           iterator const& b )
        // ******************************************************************
        {
            return a._current != b._current;
        }

        // ******************************************************************
        friend constexpr bool operator <( iterator const& a,
                                          iterator const& b )
        // ******************************************************************
        {
            return a._current < b._current;
        }

        // ******************************************************************
        friend constexpr bool operator <=( iterator const& a,
                                           iterator const& b )
        // ******************************************************************
        {
            return a._current <= b._current;
        }

        // ******************************************************************
        friend constexpr bool operator >( iterator const& a,
                                          iterator const& b )
        // ******************************************************************
        {
            return a._current > b._current;
        }

        // ******************************************************************
        friend constexpr bool operator >=( iterator const& a,
                                           iterator const& b )
        // ******************************************************************
        {
            return a._current >= b._current;
        }

        // ******************************************************************
        constexpr T operator *( void ) const
        // ******************************************************************
        {
            return _current;
        }

        // ******************************************************************
        iterator& operator ++( void )
        // ******************************************************************
        {
            ++_current;
            return *this;
        }

        // ******************************************************************
        iterator operator ++( int )
        // ******************************************************************
        {
            iterator ret = *this;
            ++_current;
            return ret;
        }

        // ******************************************************************
        iterator& operator --( void )
        // ******************************************************************
        {
            --_current;
            return *this;
        }

        // ******************************************************************
        iterator operator --( int )
        // ******************************************************************
        {
            iterator ret = *this;
            --_current;
            return ret;
        }

    protected:
        T _current;
    };


    // ******************************************************************
    constexpr xrange_type( T start,
                           T stop )
    // ******************************************************************
        : _start{start}
        , _stop{stop}
    {}

    // ******************************************************************
    friend constexpr bool operator ==( xrange_type const& a,
                                       xrange_type const& b )
    // ******************************************************************
    {
        return a._start == b._start
            && a._stop == b._stop;
    }

    // ******************************************************************
    friend constexpr bool operator !=( xrange_type const& a,
                                       xrange_type const& b )
    // ******************************************************************
    {
        return !(a == b);
    }

    // ******************************************************************
    constexpr T start( void ) const
    // ******************************************************************
    {
        return _start;
    }

    // ******************************************************************
    constexpr T stop( void ) const
    // ******************************************************************
    {
        return _stop;
    }

    // ******************************************************************
    constexpr iterator begin( void ) const
    // ******************************************************************
    {
        return {_start};
    }

    // ******************************************************************
    constexpr iterator end( void ) const
    // ******************************************************************
    {
        return {_stop};
    }

protected:
    T _start;
    T _stop;
};

// ******************************************************************
template <typename T>
xrange_type<T> constexpr xrange( T stop )
// ******************************************************************
{
    return {{}, stop};
}

// ******************************************************************
template <typename T>
xrange_type<T> constexpr xrange( T start,
                                 T stop )
// ******************************************************************
{
    return {start, stop};
}


}
